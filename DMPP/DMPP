#MPP with dependent weight parameters (DMPP)
    
    #Preparing data for analysis
    source("../Data_preparation",local=TRUE)
    
  
    #This source is a function which returns ML, SC,lambda,mu,a,b with 
    ## given data and weight values; the function is denoted by f0
    source("../function0_ML.R",local=TRUE)
 
    
    #Estimating the weight parameters without prior
    source("../weightwithoutprior.R",local=TRUE)

    
    #Function that gives alpha and beta given mu and sigmasq of beta distribution
    source("../function_estBetaParams.R",local=TRUE)
    
    
    #Function used to sample the weights in logit scale
    source("../function_logitbeta.R",local=TRUE)
     
    
    #Metropolis-Hastings algorithm for DMPP
    source("../function_DMPP.R",local=TRUE)

    
    #returns from MH, including posterior weights
    return_MH_DMPP=MH_DMPP(niter,post_mean,X0,Y0,n0,dim,a0,b0,mu0,Lambda0,X,Y,n,post_mean,post_sd,n_hist_trials)
    
    
    #posteriors of the power parameters
    postweight_DMPP=return_MH_DMPP$s_weight
    n_DMPP_post <- length(postweight_DMPP[,1])
    
    
    ##computation of model parameters DMPP
    Lambda_DMPP = list(n_DMPP_post)
    mu_DMPP = list(n_DMPP_post)
    a_DMPP = list(n_DMPP_post)
    b_DMPP = list(n_DMPP_post)
    return_f04 = list(n_DMPP_post)
    for (i in 1: n_DMPP_post){
      return_f04[[i]] <- f0(weight=postweight_DMPP[i,],X0,Y0,n0,dim,a0,b0,mu0,Lambda0,X,Y,n)
      Lambda_DMPP[[i]] =  return_f04[[i]]$Lambda_star
      mu_DMPP[[i]]=  return_f04[[i]]$mu_star
      a_DMPP[[i]] = return_f04[[i]]$a_star
      b_DMPP[[i]] = return_f04[[i]]$b_star
    }
    sigma2_DMPP <- rinvgamma(n=length(unlist(a_DMPP)),shape=unlist(a_DMPP),unlist(b_DMPP))
    beta_DMPP <- matrix(0,nrow=length(unlist(a_DMPP)),ncol=length(mu_DMPP[[1]]))
    for(i in 1:length(unlist(a_DMPP))){
      beta_DMPP[i,] <- rmnorm(n=1,mu_DMPP[[i]],sigma2_DMPP[i]*solve(Lambda_DMPP[[i]]))
    }
    result_DMPP<-as.mcmc(as.data.frame((beta_DMPP))) 
    summary(result_DMPP)
    
    
